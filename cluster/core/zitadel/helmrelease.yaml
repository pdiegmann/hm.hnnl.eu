apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: zitadel
  namespace: zitadel
spec:
  interval: 15m
  chart:
    spec:
      chart: zitadel
      version: "5.0.x"
      sourceRef:
        kind: HelmRepository
        name: zitadel
        namespace: flux-system
  dependsOn:
    - name: cubefs
      namespace: cubefs
  values:
    # Using CubeFS for persistent storage
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "cubefs-storage"
    
    # Configure database (using embedded CockroachDB)
    database:
      cockroach:
        enabled: true
        replicaCount: 3
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        persistence:
          enabled: true
          size: 20Gi
          storageClass: "cubefs-storage"
    
    # Configure Zitadel
    zitadel:
      # High availability configuration
      replicaCount: 2
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          cpu: 1000m
          memory: 1Gi
      
      configmapConfig:
        ExternalDomain: "id.homelab.local"
        ExternalPort: 443
        ExternalSecure: true
        TLS:
          Enabled: true
        
      # OIDC configuration
      configmapEnv:
        ZITADEL_OIDC_CLIENTS_BASIC_AUTHZ_OFFLINE_TIMEOUT: "30h"
        ZITADEL_OIDC_CLIENTS_TOKENLIFETIME: "12h"
        ZITADEL_DEFAULT_INSTANCE_SETUP: |
          {
            "Org": {
              "Name": "Homelab Organization",
              "Human": {
                "Username": "admin",
                "Password": "${SECRET_ADMIN_PASSWORD}",
                "Email": {
                  "Email": "admin@homelab.local"
                },
                "Profile": {
                  "FirstName": "Admin",
                  "LastName": "User"
                }
              }
            }
          }
      
      # Enable metrics and logging
      metrics:
        enabled: true
      
      serviceAccount:
        create: true
        annotations: {}
        name: "zitadel"
        
  # Values that should be stored as secrets and encrypted with SOPS
  valuesFrom:
    - kind: Secret
      name: zitadel-secrets
      valuesKey: values.yaml
